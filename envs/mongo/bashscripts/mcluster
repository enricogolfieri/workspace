#!/bin/bash

kill() {
	__enable_python_env
  echo "About to kill all processes" 
  __launch kill 
}

help(){
    echo
    echo -e "\033[1;4;32m""Functions:""\033[0;34m"
    compgen -A function
    echo
    echo -e "\033[1;4;32m""Aliases:""\033[0;34m"
    compgen -A alias
    echo
    echo -e "\033[0m"
}

list()
{
	__enable_python_env
	__launch list
}

clean() {
  kill
  echo "erasing data on $__dir"
  $__cmd_prefix rm -rf $__dir
}

launch()
{
	__enable_python_env
	__launch $__args 
}

init()
{
	__enable_python_env
	__init
}

initd()
{
	__enable_python_env
	__init --single 
}

init-replica()
{
	__enable_python_env
	__init --replicaset --nodes 3
}

#1 nodes x 2 shards + 1 node csrs
init-minicluster()
{
	__enable_python_env

	#if __watch is set, then launch a tmux session to watch the cluster
	if [ -z "$__watch" ]; then
		__init --replicaset --nodes 1 --sharded 2 $__args 
	else
		__init --replicaset --nodes 1 --sharded 2 --mongos 2 $__args 
		$__cmd_prefix mtails watch 
	fi
}

upload-data()
{
	__enable_python_env

	if ! command -v mongoimport &> /dev/null
	then
		echo "mongoimport could not be found, please install mongoimport first (apt-get install mongo-tools)"
		exit
	fi
	echo "Downloading the data, please wait..."
	git clone git@github.com:neelabalan/mongodb-sample-dataset.git ./tmp_data 


	cd ./tmp_data
	echo "Uploading data to localhost:$__port"

	for coll in *; do
		if [ -d "${coll}" ] ; then
			echo "$coll"
			for file in $coll/*; do
				mongoimport --drop --uri mongodb://127.0.0.1:27017/${coll} --file $file 
			done
		fi
	done
	cd - 

	echo "Cleaning up"
	rm -rf ./tmp_data 
	echo "Done"
}

#3 nodes x 2 shards + 1 node csrs
init-cluster()
{
	__enable_python_env
	__init --replicaset --nodes 3 --sharded 2 $__args 
}

#3 nodes x 2 shards + 3 node csrs
init-bigcluster()
{
	__enable_python_env
	__init --replicaset --nodes 3 --sharded 2 --csrs $__args 
}

connect()
{
	echo "connecting to $__args"

	__enable_python_env
	$__cmd_prefix mongo --port $__port
}

test()
{
	initd 
	$__cmd_prefix mongo --eval $1
}

plot()
{
	__enable_python_env
	mplotqueries $__args
}
#private ----------------------------------------

__launch()
{
	$__cmd_prefix mlaunch $@ --dir $__dir 
}

__init()
{
	echo "ready to init..."
	if [ -n "$__watch" ]; then
		__launch init --mongos 2 $@ 
		$__cmd_prefix mtails watch 
	else
		__launch init $@ 
	fi
}

__enable_python_env()
{
	echo "enabling python env"
	$__cmd_prefix . .venv/bin/activate
}

__set()
{
	#first argument it s one command , followings are arguments
	if [ -z "$__cmd" ]; then 
		__cmd=$1;
	else
		__args+=($1);
	fi
}


__parse_args()
{
	export PATH=./build/debug/install/bin:$PATH
	export PATH=./build/install/bin:$PATH
	[[ -z ${__parsed_args} ]] && __parsed_args=true || return 0;

	__cmd_prefix=;
	__dir="~/.mcluster/cdata/"
	__cmd=;
	__port=27017;
	__watch=;
	__args=();

	while [[ $# -gt 0 ]]; do
		case $1 in
			--echo)
				__cmd_prefix=echo;
				shift
			;;
			--watch)
				__watch=true;
				shift
			;;
			--port)
				__port=$2;
				shift 2
			;;
			*)
				__set $1;
				shift
			;;
		esac;
	done;
}

__parse_args $@
echo "ready to $__cmd"
$__cmd
echo "Stay committed"
