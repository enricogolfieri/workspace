


## Python ####
. $HOME/.config/workspace/envs/base/toolchain/.aliases-python

function ws-setup()
{    
    #package managers
    _install_brew
    _install_snap
    
    #basics
    brew install git gh
    brew install cmake ninja  ccache llvm 

    #python
    _install_pyenv
    brew install poetry
    
    #nodejs
    _install_nvm_nodejs
    #rust
    brew install rust 
    #fzf 
    brew install fzf bat fd 
    #docker
    brew install docker docker-compose
    #utils 
    brew install zlib wget curl xclip htop ncdu bpytop tmux nano
    #vscode
    _install_vscode

}

### Loaders ####
function load_brew()
{
    if [[ -n _is_linux ]]; then
    [ -d "/home/linuxbrew/" ] && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    elif [[ -n _is_macos ]]; then
    [ -d "/opt/homebrew/" ] && eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
}

### Installers ####
function _install_snap()
{
    if ! [ "$(command -v snap)" ]; then
        if  [[ -n "$_is_linux" ]] ; then
            sudo apt-get install -y snapd
        fi
    fi
}

function _install_brew()
{
    if ! [ "$(command -v brew)" ]; then
        if [[ -n "$_is_linux" ]] ; then
            sudo apt-get install -y build-essential curl git
        fi
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
    load_brew
}

function _install_nvm_nodejs()
{
    #install nvm 
    brew install nvm
    mkdir -p $HOME/.nvm    

    source $(brew --prefix nvm)/nvm.sh

    #install nodejs
    nvm install --lts
}

function _install_pyenv()
{
    #install pyenv
    [ "$(command -v pyenv)" ] && echo "[install_pyenv] Pyenv already installed" && return
    
    if [ ! -d "$HOME/.pyenv" ] 
    then
        git clone https://github.com/pyenv/pyenv.git $HOME/.pyenv
    fi

    if [[ -n "$_is_linux" ]] ; then
        sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
        libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
        xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
    elif [[ -n "$_is_macos" ]]; then
        brew install openssl readline sqlite3 xz zlib
    fi

    #setup python
    export PYENV_ROOT="$HOME/.pyenv"
    command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
    pyenv install $__sys_python3_version
    pyenv global $__sys_python3_version
}

function _install_vscode()
{
    if ! [ "$(command -v code)" ]; then
        if  [[ -n "$_is_linux" ]] ; then
            sudo snap install --classic code
        elif  [[ -n "$_is_macos" ]]; then
            brew install --cask visual-studio-code
        fi
    fi
}

function ws-test-env()
{
    echo "OS: $_os"
    #Rust
    ( [ "$(command -v rustc)" ] && echo "Rustc: $(rustc --version)" ) || echo "Rustc: NOT FOUND";
    ( [ "$(command -v cargo)" ] && echo "Cargo: $(cargo --version)" ) || echo "Cargo: NOT FOUND";
    #Python
    ( [ "$(command -v python)" ] && echo "Python: $(python --version)" ) || echo "Python: NOT FOUND";
    ( [ "$(command -v python3)" ] && echo "Python3: $(python3 --version)" ) || echo "Python3: NOT FOUND";
    ( [ "$(command -v pip)" ] && echo "Pip: $(pip --version)" ) || echo "Pip: NOT FOUND";
    ( [ "$(command -v pip3)" ] && echo "Pip3: $(pip3 --version)" ) || echo "Pip3: NOT FOUND";
    ( [ "$(command -v pyenv)" ] && echo "Pyenv: $(pyenv --version)" ) || echo "Pyenv: NOT FOUND";
    #Javascript
    ( [ "$(command -v node)" ] && echo "Node: $(node --version)" ) || echo "Node: NOT FOUND";
    ( [ "$(command -v nvm)" ] && echo "Nvm: $(nvm --version)" ) || echo "Nvm: NOT FOUND";
    #Cpp
    ( [ "$(command -v gcc)" ] && echo "Gcc: $(which gcc)" ) || echo "Gcc: NOT FOUND";
    ( [ "$(command -v clang)" ] && echo "Clang: $(which clang)" ) || echo "Clang: NOT FOUND";
    ( [ "$(command -v ninja)" ] && echo "Ninja: $(ninja --version)" ) || echo "Ninja: NOT FOUND";
    ( [ "$(command -v ccache)" ] && echo "Ccache: $(which ccache)" ) || echo "Ccache: NOT FOUND";
    ( [ "$(command -v cmake)" ] && echo "CMake: $(cmake --version)" ) || echo "CMake: NOT FOUND";

    #Docker
    ( [ "$(command -v docker)" ] && echo "Docker: $(docker --version)" ) || echo "Docker: NOT FOUND";
    ( [ "$(command -v docker-compose)" ] && echo "Docker-compose: $(docker-compose --version)" ) || echo "Docker-compose: NOT FOUND";

    #Utils
    ( [ "$(command -v git)" ] && echo "Git: $(git --version)" ) || echo "Git: NOT FOUND";
    ( [ "$(command -v gh)" ] && echo "Github CLI: $(gh --version)" ) || echo "Github CLI: NOT FOUND";
    ( [ "$(command -v fzf)" ] && echo "Fzf: $(fzf --version)" ) || echo "Fzf: NOT FOUND";
    ( [ "$(command -v bat)" ] && echo "Bat: $(bat --version)" ) || echo "Bat: NOT FOUND";
    ( [ "$(command -v fd)" ] && echo "Fd: $(fd --version)" ) || echo "Fd: NOT FOUND";

}
