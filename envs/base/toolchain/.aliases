


## Python ####
. $HOME/.config/workspace/envs/base/toolchain/.aliases-python

## Rust ####
function _install_cargo()
{
    [ "$(command -v cargo)" ] && echo "[install_cargo] cargo already installed" && return 0
    
    curl https://sh.rustup.rs -sSf | sh
}

## C/C++ ####
function _install_cpp_env()
{
    if ! [ "$(command -v cmake)" ]; then
        if  [[ -n "$_is_linux" ]] ; then
            sudo apt-get install -y cmake
            sudo apt-get install -y build-essential
            sudo apt-get install -y ninja-build
            sudo apt install -y clang lldb lld llvm
            sudo apt-get install -y ccache
        elif  [[ -n "$_is_macos" ]]; then
            brew install cmake
            brew install ninja
            brew install ccache
            #better install xcode manually
        fi
    else
        echo "[install_cpp_env] cmake already installed"
    fi
}

## Javascript ####
### Load nvm
function _load_nvm()
{
    if [[ -n "$_is_macos" ]]; then
        export NVM_DIR="$HOME/.nvm"
        source $(brew --prefix nvm)/nvm.sh
    else
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    fi
}

function _install_nvm_nodejs()
{
    #install nvm 
    if ! [ "$(command -v nvm)" ]; then
        if [[ -n "$_is_linux" ]]; then
            curl -sL https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.0/install.sh -o /tmp/install_nvm.sh
            bash /tmp/install_nvm.sh
            rm -rf /tmp/install_nvm.sh
        elif [[ -n "$_is_macos" ]]; then
            brew install nvm
            mkdir -p $HOME/.nvm    
        else
            echo "[install_nvm_nodejs] Unsupported OS"
        fi
    fi

    _load_nvm
    #install nodejs
    if ! [ "$(command -v node)" ]; then
        nvm install --lts
    fi
}

## Utility installer ####

function _check_cargo()
{
    if ! [ "$(command -v cargo)" ]; then
        echo "cargo not found, please install it first"
        return 1
    fi
}

function ws-install-env()
{
    _install_cpp_env
    _install_conda
    _install_pyenv
    _install_cargo
    _install_nvm_nodejs
    _install_docker
    _install_docker-compose
}

function ws-test-env()
{
    echo "OS: $_os"
    #Rust
    ( [ "$(command -v rustc)" ] && echo "Rustc: $(rustc --version)" ) || echo "Rustc: NOT FOUND";
    ( [ "$(command -v cargo)" ] && echo "Cargo: $(cargo --version)" ) || echo "Cargo: NOT FOUND";
    #Python
    ( [ "$(command -v python)" ] && echo "Python: $(python --version)" ) || echo "Python: NOT FOUND";
    ( [ "$(command -v python3)" ] && echo "Python3: $(python3 --version)" ) || echo "Python3: NOT FOUND";
    ( [ "$(command -v pip)" ] && echo "Pip: $(pip --version)" ) || echo "Pip: NOT FOUND";
    ( [ "$(command -v pip3)" ] && echo "Pip3: $(pip3 --version)" ) || echo "Pip3: NOT FOUND";
    
    ( [ "$(command -v conda)" ] && echo "Conda: $(conda --version)" ) || echo "Conda: NOT FOUND";
    ( [ "$(command -v pyenv)" ] && echo "Pyenv: $(pyenv --version)" ) || echo "Pyenv: NOT FOUND";
    #Javascript
    ( [ "$(command -v node)" ] && echo "Node: $(node --version)" ) || echo "Node: NOT FOUND";
    ( [ "$(command -v nvm)" ] && echo "Nvm: $(nvm --version)" ) || echo "Nvm: NOT FOUND";
    #Cpp
    ( [ "$(command -v gcc)" ] && echo "Gcc: $(gcc --version)" ) || echo "Gcc: NOT FOUND";
    ( [ "$(command -v clang)" ] && echo "Clang: $(clang --version)" ) || echo "Clang: NOT FOUND";
    ( [ "$(command -v ninja)" ] && echo "Ninja: $(ninja --version)" ) || echo "Ninja: NOT FOUND";
    ( [ "$(command -v ccache)" ] && echo "Ccache: $(ccache --version)" ) || echo "Ccache: NOT FOUND";
    ( [ "$(command -v cmake)" ] && echo "CMake: $(cmake --version)" ) || echo "CMake: NOT FOUND";

    #Docker
    ( [ "$(command -v docker)" ] && echo "Docker: $(docker --version)" ) || echo "Docker: NOT FOUND";
    ( [ "$(command -v docker-compose)" ] && echo "Docker-compose: $(docker-compose --version)" ) || echo "Docker-compose: NOT FOUND";
}
