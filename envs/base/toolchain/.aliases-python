
## python ####

# activate python env
function ws-venv-activate()
{
    if [ -d "./.venv" ]; then
        source ./.venv/bin/activate
    fi
}
alias vactivate="ws-venv-activate"

# create a new python virtual environment local to the current directory
function ws-venv-setup()
{   
    _pyversion=$1
    [ -z "$1" ] && echo "Usage: vsetup <python version (3.x.x)>" && return 1
    
    #delete if exists
    [[ -d "./.venv" ]] && rm -rf "./.venv";

    pyenv shell $_pyversion ||
    ( (echo "$_pyversion not found, ready to install..." &&
     pyenv install $_pyversion && pyenv shell $_pyversion) ||
    (echo "pyenv shell $_pyversion failed" && return 1) );

    python -m venv ./.venv || (echo "Failed to create virtual environment" && return 1);

    #install requirements if exists
    if [ -f "requirements.txt" ]; then
        source ./.venv/bin/activate \
        && python -m pip install --upgrade pip && \
        pip install -r requirements.txt
    fi
}
alias vsetup="ws-venv-setup"
alias vsetup-default="ws-venv-setup $__sys_python3_version"

## Utility python ####
#redifining cd to automatically activate python inside .venv
cd ()
{
	builtin cd $@

	# Check there is no virtual environment activated.
	if [[ -z ${VIRTUAL_ENV} ]]; then
		# If the .venv directory is found then activate the virtual
		# environment.
        if [ -d "./.venv" ]; then
            source ./.venv/bin/activate
        fi
	else
		# If the current directory does not belong to earlier VIRTUAL_ENV
		# directory then deactivate the virtual environment.
		PARENT_DIR=$(dirname ${VIRTUAL_ENV})
		if [[ ${PWD}/ != ${PARENT_DIR}/* ]]; then
			deactivate
		fi
	fi
}


