
__sys_python3_version="3.9.2"

## python ####
function _install_conda()
{
    # Install conda
    if ! [ "$(command -v conda)" ]; then
        case $_os in
            Linux)
                wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh
            ;;
            Darwin)
                wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O /tmp/miniconda.sh
            ;;
        esac

        bash /tmp/miniconda.sh -b -p $HOME/miniconda
        rm /tmp/miniconda.sh
        ### init conda, the following command write scripts into your shell init file automatically
        export PATH="$HOME/miniconda/bin:$PATH"
        conda init

        # disable init of env "base"
        conda config --set auto_activate_base false
    else
        echo "[install_conda] Conda already installed"
    fi
}

function _install_pyenv()
{
    #install pyenv
    [ "$(command -v pyenv)" ] && echo "[install_pyenv] Pyenv already installed" && return
    
    if [ ! -d "$HOME/.pyenv" ] 
    then
        git clone https://github.com/pyenv/pyenv.git $HOME/.pyenv
    fi

    if [[ -n "$_is_linux" ]] ; then
        sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
        libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
        xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
    elif [[ -n "$_is_macos" ]]; then
        brew install openssl readline sqlite3 xz zlib
    fi

    #setup python
    export PYENV_ROOT="$HOME/.pyenv"
    command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
    pyenv install $__sys_python3_version
    pyenv global $__sys_python3_version
}

# activate python env
function ws-venv-activate()
{
    if [ -d "./.venv" ]; then
        source ./.venv/bin/activate
    elif [ -f "environment.yml" ]; then
        conda activate $(head -n 1 environment.yml | cut -d' ' -f2)
    else
        echo "No virtual environment found"
    fi
}
alias avenv="ws-venv-activate"

# create a new python virtual environment local to the current directory
function ws-venv-setup()
{   
    _pyversion=$1
    [ -z "$1" ] && _pyversion=$__sys_python3_version
    
    #delete if exists
    [[ -d "./.venv" ]] && rm -rf "./.venv";

    pyenv shell $_pyversion ||
    ( (echo "$_pyversion not found, ready to install..." &&
     pyenv install $_pyversion && pyenv shell $_pyversion) ||
    (echo "pyenv shell $_pyversion failed" && return 1) );

    python -m venv ./.venv || (echo "Failed to create virtual environment" && return 1);
    

    #install requirements if exists
    if [ -f "requirements.txt" ]; then
        source ./.venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    fi
}

# create a new conda virtual environment and activate it
function ws-venv-setup-conda()
{
    conda env activate base 
    conda env create -f ./environment.yml
    
    #install requirements if exists
    local _envname=$(head -n 1 environment.yml | cut -d' ' -f2)
    if [ -f "requirements.txt" ]; then
        conda activate $_envname
        pip install -r requirements.txt 
    fi

    #activate conda env
    conda activate $_envname
}

## Utility python ####
#redifining cd to automatically activate python inside .venv
cd ()
{
	builtin cd $@

	# Check there is no virtual environment activated.
	if [[ -z ${VIRTUAL_ENV} ]]; then
		# If the .venv directory is found then activate the virtual
		# environment.
        if [ -d "./.venv" ]; then
            source ./.venv/bin/activate
        fi
	else
		# If the current directory does not belong to earlier VIRTUAL_ENV
		# directory then deactivate the virtual environment.
		PARENT_DIR=$(dirname ${VIRTUAL_ENV})
		if [[ ${PWD}/ != ${PARENT_DIR}/* ]]; then
			deactivate
		fi
	fi
}


