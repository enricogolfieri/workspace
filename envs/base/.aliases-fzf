# list all the aliases in the current file with their description
ws-fzf-help()
{
    echo "  fdd: fuzzy cd"
    echo "  fda: fuzzy cd to ls -a"
    echo "  fdp: fuzzy cd to ls -a to parent directory"
    echo "  fde: fuzzy cd from anywhere"
    echo "  fif : fuzzy find in files"
    echo "  fdf: fdc including hidden files and directories"
    echo "  fdr: fdc including hidden files and directories, searching from root"
    echo "  gco: fuzzy git checkout" 
    echo "  gcop: fuzzy git checkout with preview"
    echo "  gcos: fuzzy git checkout sorted by most recent commit"
    echo "  fbrew : fuzzy brew install"
    echo "  fbrewu : fuzzy brew uninstall"
    echo "  fcask : fuzzy brew cask install"
    echo "  fcasku : fuzzy brew cask uninstall"
}

#ws-fzf-help with fuzzy search
function fhelp()
{
    ws-fzf-help-relevant | fzf
}


ws-fzf-help-short()
{
    echo "  fda: fuzzy cd -a"
    echo "  fdf: go to the directory of the selected file"
    echo "  fif : fuzzy find in files"
    echo "  gco: fuzzy git checkout" f
    echo "  gcop: fuzzy git checkout with preview"
    echo "  fbrew : fuzzy brew install"
    echo "  fcask : fuzzy brew cask install"
}

# fdd - cd to selected directory
fdd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# fda - fdc including hidden directories
fda() {
  local dir
  dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}


# fdc - fdc from anywhere
# ex: cf word1 word2 ... (even part of a file name)
# zsh autoload function
fde() {
  local file

  file="$(locate -Ai -0 $@ | grep -z -vE '$HOME$' | fzf --read0 -0 -1)"

  if [[ -n $file ]]
  then
     if [[ -d $file ]]
     then
        cd -- $file
     else
        cd -- ${file:h}
     fi
  fi
}

# fdf - fdc into the directory of the selected file
fdf() {
   local file
   local dir
   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

# fdr - fdc including hidden files and directories, searching from root
fdr() {
  local dir
  dir=$(find / -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}


# using ripgrep combined with preview
# find-in-file - usage: fif <searchTerm>
fif() {
  if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
  rg --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}

### Git ###

# gco - checkout git branch/tag
gco() {
  local tags branches target
  branches=$(
    git --no-pager branch --all \
      --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mbranch%09%1B[m%(refname:short)%(end)%(end)" \
    | sed '/^$/d') || return
  tags=$(
    git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}') || return
  target=$(
    (echo "$branches"; echo "$tags") |
    fzf --no-hscroll --no-multi -n 2 \
        --ansi) || return
  git checkout $(awk '{print $2}' <<<"$target" )
}

# gbrs - checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches
gcos() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# gcop - checkout git branch/tag, with a preview showing the commits between the tag/branch and HEAD
gcop() {
  local tags branches target
  branches=$(
    git --no-pager branch --all \
      --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mbranch%09%1B[m%(refname:short)%(end)%(end)" \
    | sed '/^$/d') || return
  tags=$(
    git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}') || return
  target=$(
    (echo "$branches"; echo "$tags") |
    fzf --no-hscroll --no-multi -n 2 \
        --ansi --preview="git --no-pager log -150 --pretty=format:%s '..{2}'") || return
  git checkout $(awk '{print $2}' <<<"$target" )
}
# fstash - easier way to deal with stashes
# type fstash to get a list of your stashes
# enter shows you the contents of the stash
# ctrl-d shows a diff of the stash against your current HEAD
# ctrl-b checks the stash out as a branch, for easier merging
gstash() {
  local out q k sha
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf --ansi --no-sort --query="$q" --print-query \
        --expect=ctrl-d,ctrl-b);
  do
    mapfile -t out <<< "$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
      git diff $sha
    elif [[ "$k" == 'ctrl-b' ]]; then
      git stash branch "stash-$sha" $sha
      break;
    else
      git stash show -p $sha
    fi
  done
}

# fshow - show git commit
gshow() {
  local commits commit
  _summary=;
  [[ -n "$1" ]] && _summary="--summary -- $1";

  commits=$(git log --pretty="%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s" --date=short $_summary) &&
  commit=$(echo "$commits" | fzf --ansi --no-sort --reverse --tiebreak=index --preview-window=right:60% --preview="git show --color=always {1}") &&
  git show --color=always $(echo "$commit" | awk '{print $1}')
}

### Man Pages ###
fman() {
    man -k . | fzf --prompt='Man> ' | awk '{print $1}' | xargs -r man
}

### brew ###
FB_FORMULA_PREVIEW='HOMEBREW_COLOR=true brew info {}'
FB_FORMULA_BIND="ctrl-space:execute-silent(brew home {})"
FB_CASK_PREVIEW='HOMEBREW_COLOR=true brew info --cask {}'
FB_CASK_BIND="ctrl-space:execute-silent(brew home --cask {})"

function fbrew() {
    local inst=$(brew formulae | fzf --query="$1" -m --preview $FB_FORMULA_PREVIEW --bind $FB_FORMULA_BIND)

    if [[ $inst ]]; then
        for prog in $(echo $inst); 
        do
          brew install $prog; 
        done
    fi
}

function fbrewu() {
    local uninst=$(brew leaves | fzf --query="$1" -m --preview $FB_FORMULA_PREVIEW --bind $FB_FORMULA_BIND)

    if [[ $uninst ]]; then
        for prog in $(echo $uninst);
        do 
          brew uninstall $prog; 
        done
    fi
}

function fcask() {
    local inst=$(brew casks | fzf --query="$1" -m --preview $FB_CASK_PREVIEW --bind $FB_CASK_BIND)

    if [[ $inst ]]; then
        for prog in $(echo $inst); 
          do
            brew install --cask $prog; 
          done
    fi
}

function fcasku() {
    local inst=$(brew list --cask | fzf --query="$1" -m --preview $FB_CASK_PREVIEW --bind $FB_CASK_BIND)

    if [[ $inst ]]; then
        for prog in $(echo $inst); 
        do 
          brew uninstall --cask $prog; 
        done
    fi
}

function fzf-history() {
  history | fzf +s --tac | sed 's/ *[0-9]* *//'
}

alias hf='fzf-history'



