#!/bin/bash

IMGX_DATA="$HOME/data"
. $HOME/.config/workspace/envs/base/imaginary/.aliases

imaginairy_docker()
{
    docker build -t imaginary - < $HOME/.config/workspace/envs/imaginary/Dockerfile && \
    docker run -it --gpus all --rm -v $IMGX_DATA:/root/data/ \
                                   -v $HOME/.config/workspace:/root/.config/workspace \
                                   -v $HOME/.ssh:/root/.ssh -v $HOME/.gitconfig:/root/.gitconfig \
                                   -v $HOME/.cache/huggingface:/root/.cache/huggingface \
                                   -v $HOME/.cache/torch:/root/.cache/torch imaginary /bin/bash
}

_setup_docker_nvidia()
{
    sudo rm -rf /etc/apt/sources.list.d/nvidia-container-toolkit.list
    sudo rm -rf /etc/apt/sources.list.d/nvidia-docker.list
    sudo rm -rf /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
    
    distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
      && curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
      && curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | \
            sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
            sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
    sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit
    sudo nvidia-ctk runtime configure --runtime=docker
    sudo systemctl restart docker
    sudo reboot
}

_setup_env()
{
    git clone "https://github.com/enricogolfieri/imaginAIry.git" $_imaginairy_code
    make init 
 
    #install  instaloader
    pip install instaloader || (echo "Failed to install instaloader" && return 1);
}

_update_env()
{
    $_imaginairy_code/.venv/bin/activate
    pip install --upgrade pip
    pip install --upgrade imaginary
    pip install --upgrade instaloader
}

#----- download
#datax download --profile --face <name> <url>
#datax instaloader <url>
#datax info
#----- setup/init
#datax setup
#datax setup-nvidia
#datax imgxrun
#datax imgxrun-docker
#datax fsrun
#datax fsrun-docker
#----- utility
#datax select </path/to/pic>
#-------------
#datax help
#datax hello
#datax 

_cmd=$1
shift
case $_cmd in
    hello)
        echo "hello baby";
    ;;
    setup)
        _setup_env
    ;;
    setup-nvidia)
        _setup_docker_nvidia
    ;;
    activate-imaginairy)
        $_imaginairy_code/.venv/bin/activate
    ;;
    update)
        _update_env
    ;;
    instaloader-profile)
        [[ -z "$1" ]] && echo "Please provide a profile url" && return 1;
        #extract name from url
        _name=$(echo $1 | sed 's/https:\/\/www.instagram.com\///g')
        [[ -z "$_name" ]] && echo "Failed to extract name from url" && return 1;

        instaloader profile $1 --dirname-pattern "$IMGX_DATA/instagram/$_name"
        shift;
        rm -rf $IMGX_DATA/instagram/$_name/*.txt;
        rm -rf $IMGX_DATA/instagram/$_name/*.tz
    ;;
    imaginairy-docker)
        imaginairy_docker
    ;;
    imaginairy)
            aimg server &
            sleep 2
            open http://localhost:8000
    ;;
    select)
        mkdir -p "$IMGX_DATA"/selected
        cp $1 "$_img_workdir"/selected/
    ;;
    imagine)
        _img=$(ls $IMGX_DATA/selected | head -n 1)
        _img_cmd=""
        [ -z "$_img" ] || _img_cmd="--init-image $IMGX_DATA/selected/$_img"
        imagine  --model $_model $_img_cmd --output "$_img_workdir/result" "$@"
    ;;
    control-canny)
        _img=$(ls $_img_workdir/selected | head -n 1)
        _img_cmd=""
        [ -z "$_img" ] || _img_cmd="--control-image $_img_workdir/selected/$_img"
        imagine --model $_model $_img_cmd  control-mode canny --output "$_img_workdir/result" "$@" 
    ;;
    swap-face)
        _img=$(ls $_img_workdir/selected | head -n 1)
        _img_cmd=""
        [ -z "$_img" ] || _img_cmd="--init-image $_img_workdir/selected/$_img"
        imagine --model $_model $_img_cmd --mask-prompt "NOT face" --mask-mode keep --init-image-strength .2 --fix-faces --output "$_img_workdir/result" $1
esac


