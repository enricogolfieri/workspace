
## python ####
# explain python aliases
function ws-python-help()
{
    echo "python aliases: "
    echo "<x> mandatory argument"
    echo "[x] optional argument, uses default value if not specified"
    echo "  vact: activate python env"
    echo "  vset: [python version (3.x.x)] [requirements-file-name] create a new python virtual environment local to the current directory"
    echo "  venv: [python version (3.x.x)] [requirements-file-name] activate python env if exist otherwise create it"
    echo "  vgit: <repo-url> [python version (3.x.x)] [requirements-file-name] CLONE AND CONVERT a git repo and create a python virtual environment local to the current directory"
}
# activate python env
function vact()
{
    if [ -d "./.venv" ]; then
        source ./.venv/bin/activate
    elif [ -f "./.python-version"]
        pyenv activate $(cat ./.python-version)
    else
        return 1
    fi
}

# create a new python virtual environment local to the current directory
function vset()
{   
    _pyversion=${1:-$__sys_python3_version}
    #print usage if first argument is help
    [ "$1" = "--help" ] && echo "Usage: vset <python version (3.x.x)> [requirements-file-name]" && return 0
        
    #delete if exists
    [[ -d "./.venv" ]] && rm -rf "./.venv";

    pyenv shell $_pyversion ||
    ( (echo "$_pyversion not found, ready to install..." &&
     pyenv install $_pyversion) ||
    (echo "pyenv shell $_pyversion failed" && return 1) );

    pyenv shell $_pyversion
    python3 -m venv ./.venv || (echo "Failed to create virtual environment" && return 1);

    #install requirements if exists
    $requiments_file_name=${2:-"./requirements.txt"}
    if [[ -f "$requiments_file_name" ]]; then
        source ./.venv/bin/activate \
        && python3 -m pip install --upgrade pip && \
        pip install -r $requiments_file_name
    fi
}

function venv()
{
    #activate if exist otherwise create it 
    vact || vset $@
}


# vgit: CLONE AND CONVERT a git repo and create a python virtual environment local to the current directory
function vgit()
{
    [ "$1" = "--help" ] && echo "Usage: vgit <repo-url> [python version (3.x.x)] [requirements-file-name]" && return 0

    if [ -z "$1" ]; then
        echo "Usage: vgit <repo-url> [python version (3.x.x)] [requirements-file-name]"
        return 1
    else
        _repo_url=$1
        _pyversion=${2:-$__sys_python3_version}
        _requiments_file_name=${3:-"requirements.txt"}
        ws-venv-from-git $_repo_url $_pyversion $_requiments_file_name
    fi
}

## Utility python ####
#redifining cd to automatically activate python inside .venv
cd ()
{
	builtin cd $@

	# Check there is no virtual environment activated.
	if [[ -z ${VIRTUAL_ENV} ]]; then
		# If the .venv directory is found then activate the virtual
		# environment.
        if [ -d "./.venv" ]; then
            source ./.venv/bin/activate
        fi
	else
		# If the current directory does not belong to earlier VIRTUAL_ENV
		# directory then deactivate the virtual environment.
		PARENT_DIR=$(dirname ${VIRTUAL_ENV})
		if [[ ${PWD}/ != ${PARENT_DIR}/* ]]; then
			deactivate
		fi
	fi
}


