
_img_workdir="$HOME/imaginary/local"

imgx()
{
    local _cmd=$1
    shift
    case $_cmd in
        code)
            imgx-code
        ;;
        setup)
            imgx-setup
        ;;
        update)
            imgx-update
        ;;
        setup-nvidia)
            _setup_docker_nvidia
        ;;
        download)
            imgx-download
        ;;
        run)
            imgx-activate-locally
        ;;
        rund)
            imgx-run-docker
        ;;
        server)
            imgx-server
        ;;
        *)
            imagine --output "$_img_workdir" "$@"
        ;;
    esac
}

imgx-run-docker()
{
    docker build -t imaginary - < $HOME/.config/workspace/envs/imaginary/Dockerfile && \
    docker run -it --gpus all --rm -v $_img_workdir:/root/imaginary/local \
                                   -v $HOME/.config/workspace:/root/.config/workspace \
                                   -v $HOME/.ssh:/root/.ssh -v $HOME/.gitconfig:/root/.gitconfig \
                                   -v $HOME/.cache/huggingface:/root/.cache/huggingface \
                                   -v $HOME/.cache/torch:/root/.cache/torch \
                                   imaginary /bin/bash
}

imgx-activate-locally()
{
    source "$_img_workdir/.venv/bin/activate"
}

imgx-code()
{
    cd "$_img_workdir" 
    imgx-activate-locally
    code .
}

imgx-setup()
{
    [ -d "$_img_workdir" ] && echo "Imaginary workdir already exists, skipping..." && return 0;

    mkdir -p "$_img_workdir"
    _setup_env
    cd "$_img_workdir"
    imagine "a forest"; 
    imagine --model sd21v "a forest"
}

imgx-download()
{
    echo "To implement"
}

imgx-server()
{
    aimg server &
    sleep 2
    open http://localhost:8000
}

_setup_docker_nvidia()
{
    sudo rm -rf /etc/apt/sources.list.d/nvidia-container-toolkit.list
    sudo rm -rf /etc/apt/sources.list.d/nvidia-docker.list
    sudo rm -rf /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
    
    distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
      && curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
      && curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | \
            sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
            sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
    sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit
    sudo nvidia-ctk runtime configure --runtime=docker
    sudo systemctl restart docker
}

_setup_env()
{
    _pyversion='3.10.6'
    
    #delete if exists
    [[ -d "$_img_workdir/.venv" ]] && rm -rf "$_img_workdir/.venv";

    ws-venv-from-requirements $_pyversion

    imgx-activate-locally || (echo "Failed to activate virtual environment" && return 1);
    pip install --upgrade pip || (echo "Failed to upgrade pip" && return 1);
    pip install imaginairy || (echo "Failed to install imaginairy" && return 1);
}

imgx-update()
{
    imgx-activate-locally
    pip install --upgrade pip
    pip install --upgrade imaginary
}


