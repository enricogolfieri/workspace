
__sys_python_version="3.9.2"

. $HOME/.config/workspace/base/utils/env.sh

## python ####
function _install_conda()
{
    # Install conda
    if ! [ "$(command -v conda)" ]; then
        case $_os in
            Linux)
                wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh
            ;;
            Darwin)
                wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O /tmp/miniconda.sh
            ;;
        esac

        bash /tmp/miniconda.sh -b -p $HOME/miniconda
        rm /tmp/miniconda.sh
        ### init conda, the following command write scripts into your shell init file automatically
        export PATH="$HOME/miniconda/bin:$PATH"
        conda init

        # disable init of env "base"
        conda config --set auto_activate_base false
    else
        echo "[install_conda] Conda already installed"
    fi
}

function _install_pyenv()
{
    #install pyenv
    if [ ! -d "$HOME/.pyenv" ] 
    then
        git clone https://github.com/pyenv/pyenv.git $HOME/.pyenv
    fi

    #setup python
    export PYENV_ROOT="$HOME/.pyenv"
    command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
    pyenv install $__sys_python_version
    pyenv global $__sys_python_version
}

## Rust ####
function _install_cargo()
{
    if ! [ "$(command -v cargo)" ]; then
        curl https://sh.rustup.rs -sSf | sh
    fi
}

## C/C++ ####
function _install_cpp_env()
{
    if ! [ "$(command -v cmake)" ]; then
        if  [[ "$_os" = "Linux" ]] ; then
            sudo apt-get install -y cmake
            sudo apt-get install -y build-essential
            sudo apt-get install -y ninja-build
            sudo apt install -y clang lldb lld
            sudo apt-get install -y ccache
        elif  [[ "$_os" = "Darwin" ]]; then
            brew install cmake
            brew install ninja
            brew install ccache
            #better install xcode manually
        fi
    fi
}

## Javascript ####
### Load nvm
function _load_nvm()
{
    if [[ _os == "Darwin" ]]; then
        export NVM_DIR="$HOME/.nvm"
        source $(brew --prefix nvm)/nvm.sh
    else
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    fi
}
function _install_nvm_nodejs()
{
    #install nvm 
    if ! [ "$(command -v nvm)" ]; then
        if [[ "$_os" = "Linux" ]]; then
            curl -sL https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.0/install.sh -o /tmp/install_nvm.sh
            bash /tmp/install_nvm.sh
            rm -rf /tmp/install_nvm.sh
        elif [[ "$_os" = "Darwin" ]]; then
            brew install nvm
            mkdir -p $HOME/.nvm    
        else
            echo "[install_nvm_nodejs] Unsupported OS"
        fi
    fi

    _load_nvm
    #install nodejs
    if ! [ "$(command -v node)" ]; then
        nvm install --lts
    fi
}

## Utility installer ####

function _check_cargo()
{
    if ! [ "$(command -v cargo)" ]; then
        echo "cargo not found, please install it first"
        return 1
    fi
}

function ws-install-env()
{
    _install_cpp_env
    _install_conda
    _install_pyenv
    _install_cargo
    _install_nvm_nodejs
}

function ws-test-env()
{
    echo "OS: $_os"
    #Rust
    ( [ "$(command -v rustc)" ] && echo "Rustc: $(rustc --version)" ) || echo "Rustc: NOT FOUND";
    ( [ "$(command -v cargo)" ] && echo "Cargo: $(cargo --version)" ) || echo "Cargo: NOT FOUND";
    #Python
    ( [ "$(command -v python)" ] && echo "Python: $(python --version)" ) || echo "Python: NOT FOUND";
    ( [ "$(command -v python3)" ] && echo "Python3: $(python3 --version)" ) || echo "Python3: NOT FOUND";
    ( [ "$(command -v pip)" ] && echo "Pip: $(pip --version)" ) || echo "Pip: NOT FOUND";
    ( [ "$(command -v pip3)" ] && echo "Pip3: $(pip3 --version)" ) || echo "Pip3: NOT FOUND";
    
    ( [ "$(command -v conda)" ] && echo "Conda: $(conda --version)" ) || echo "Conda: NOT FOUND";
    ( [ "$(command -v pyenv)" ] && echo "Pyenv: $(pyenv --version)" ) || echo "Pyenv: NOT FOUND";
    #Javascript
    ( [ "$(command -v node)" ] && echo "Node: $(node --version)" ) || echo "Node: NOT FOUND";
    ( [ "$(command -v nvm)" ] && echo "Nvm: $(nvm --version)" ) || echo "Nvm: NOT FOUND";
    #Cpp
    ( [ "$(command -v gcc)" ] && echo "Gcc: $(gcc --version)" ) || echo "Gcc: NOT FOUND";
    ( [ "$(command -v clang)" ] && echo "Clang: $(clang --version)" ) || echo "Clang: NOT FOUND";
    ( [ "$(command -v ninja)" ] && echo "Ninja: $(ninja --version)" ) || echo "Ninja: NOT FOUND";
    ( [ "$(command -v ccache)" ] && echo "Ccache: $(ccache --version)" ) || echo "Ccache: NOT FOUND";
    ( [ "$(command -v cmake)" ] && echo "CMake: $(cmake --version)" ) || echo "CMake: NOT FOUND";
}

## Utility python ####
#redifining cd to automatically activate python inside .venv
cd ()
{
	builtin cd $@

	# Check there is no virtual environment activated.
	if [[ -z ${VIRTUAL_ENV} ]]; then
		# If the .venv directory is found then activate the virtual
		# environment.
		if [[ -d ./.venv ]]; then
			. .venv/bin/activate
		fi
	else
		# If the current directory does not belong to earlier VIRTUAL_ENV
		# directory then deactivate the virtual environment.
		PARENT_DIR=$(dirname ${VIRTUAL_ENV})
		if [[ ${PWD}/ != ${PARENT_DIR}/* ]]; then
			deactivate
		fi
	fi
}

# activate python env
function _activate_venv()
{
    ./.venv/bin/activate
}

# create a new python virtual environment local to the current directory
function vsetup()
{   
    _pyversion=$1
    [ -z "$1" ] && _pyversion=$__sys_python_version
    
    pyenv shell $_pyversion ||
    echo "$_pyversion not found, ready to install..." &&
    pyenv install $_pyversion && pyenv shell $_pyversion ||
    echo "pyenv shell $_pyversion failed" && return 1;

    python -m venv ./.venv || echo "Failed to create virtual environment" && return 1;

    #install requirements if exists
    if [ -f "requirements.txt" ]; then
        _activate_venv
        pip install -r requirements.txt
    fi
}

# create a new conda virtual environment and activate it
function vsetup-conda()
{
    conda env create -f ./environment.yml
    
    #install requirements if exists
    local _envname=$(head -n 1 environment.yml | cut -d' ' -f2)
    if [ -f "requirements.txt" ]; then
        conda activate $_envname
        pip install -r requirements.txt 
    fi

    #activate conda env
    conda activate $_envname
}
