
__sys_python_version="3.9.2"

### Compute _os variable
. $HOME/.config/workspace/base/env.sh

## install utilities ####

function _install_conda()
{
    # Install conda
    if ! [ -x "$(command -v conda)" ]; then
        if  [[ "$_os" = "Linux" ]] ; then
            wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh
        elif  [[ "$_os" = "Darwin" ]]; then
            wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O /tmp/miniconda.sh
        else
            echo "[install_conda] Unsupported OS"
            return
        fi
        bash /tmp/miniconda.sh -b -p $HOME/miniconda
        rm /tmp/miniconda.sh
    else
        echo "[install_conda] Conda already installed"
    fi

    ### init conda, the following command write scripts into your shell init file automatically
    export PATH="$HOME/miniconda/bin:$PATH"
    conda init

    # disable init of env "base"
    conda config --set auto_activate_base false
}

function _install_cargo()
{
    if ! [ -x "$(command -v cargo)" ]; then
        curl https://sh.rustup.rs -sSf | sh
    fi
}

function _install_fd_find()
{
    # Install fd find
    if ! [ -x "$(command -v fd)" ]; then
        _install_cargo 
        git clone git@github.com:sharkdp/fd.git /tmp/fd
        cd /tmp/fd
        cargo install --path . 
        cd - 
        rm -rf /tmp/fd
    fi  
}

function _install_bat()
{
    # Install bat
    if ! [ -x "$(command -v bat)" ]; then
        _install_cargo 
        git clone git@github.com:sharkdp/bat.git /tmp/bat
        cd /tmp/bat
        cargo install --path . 
        cd - 
        rm -rf /tmp/bat
    fi
}

function _install_pyenv()
{
    #install pyenv
    if [ ! -d "$HOME/.pyenv" ] 
    then
        git clone https://github.com/pyenv/pyenv.git $HOME/.pyenv
    fi

    #setup python
    export PYENV_ROOT="$HOME/.pyenv"
    command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
    pyenv install $__sys_python_version
    pyenv global $__sys_python_version
}

function _install_fzf()
{
    if [ ! -d "$HOME/.fzf" ] 
    then
       git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    fi
}

function _install_meslo_font()
{
    if [[ ! -f "/usr/share/fonts/PowerlineSymbols.otf " ]] 
    then  
        wget https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf
        wget https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf

        sudo mv 10-powerline-symbols.conf /etc/fonts/conf.d/
        sudo mv PowerlineSymbols.otf /usr/share/fonts/
    fi
}

function _install_oh_my_posh()
{
    if [ ! -d "/usr/local/bin/oh-my-posh" ] 
    then
        wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -O /usr/local/bin/oh-my-posh
        chmod +x /usr/local/bin/oh-my-posh
    fi

    if [ ! -d "$HOME/.poshthemes" ] 
    then
        mkdir ~/.poshthemes
        wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/themes.zip -O ~/.poshthemes/themes.zip
        unzip ~/.poshthemes/themes.zip -d ~/.poshthemes
        chmod u+rw ~/.poshthemes/*.json
        rm ~/.poshthemes/themes.zip
    fi
}

function _install_gh()
{
    if [[ "$_os" = "Linux" ]]; then
        #install gh 
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh
    elif [[ "$_os" = "Darwin" ]]; then
        brew install gh
    else
        echo "[install_gh] Unsupported OS"
    fi
}

function _install_nvm_nodejs()
{
    #install nvm 
    if ! [ -x "$(command -v nvm)" ]; then
        if [[ "$_os" = "Linux" ]]; then
            curl -sL https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.0/install.sh -o /tmp/install_nvm.sh
            bash /tmp/install_nvm.sh
            rm -rf /tmp/install_nvm.sh
            #reload
            source ~/.bash_profile
        elif [[ "$_os" = "Darwin" ]]; then
            brew install nvm
            mkdir -p ~/.nvm    
            export NVM_DIR=~/.nvm
            source $(brew --prefix nvm)/nvm.sh
        else
            echo "[install_nvm_nodejs] Unsupported OS"
        fi
    fi

    #install nodejs
    if ! [ -x "$(command -v node)" ]; then
        nvm install --lts
    fi
}

function _install_ncdu()
{
    if [[ "$_os" = "Linux" ]]; then
        sudo apt install ncdu
    elif [[ "$_os" = "Darwin" ]]; then
        brew install ncdu
    else
        echo "[install_ncdu] Unsupported OS"
    fi
}

function workspace-setup(){
    echo "installin workspace dependencies..."

    _install_oh_my_posh

    _install_meslo_font

    _install_bat

    _install_fd_find

    _install_fzf

    _install_pyenv

    _install_conda

    _install_gh

    _install_nvm_nodejs

    _install_ncdu
    
    echo "Done!"
}